Задание к уроку 4:
Добавить необходимую таблицу/таблицы для того, чтобы можно было использовать лайки для медиафайлов, 
постов и пользователей.


DROP DATABASE vk;
CREATE DATABASE  vk;
SHOW DATABASES;
USE vk;

CREATE TABLE users (
id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
first_name VARCHAR(100) NOT NULL COMMENT "Имя пользователя",
last_name VARCHAR(100) NOT NULL COMMENT "Фамилия пользователя",
birthday DATE NOT NULL COMMENT "Дата рождения",
gender ENUM ("M", "F") NOT NULL COMMENT "Пол",
email VARCHAR(100) NOT NULL UNIQUE COMMENT "E-mail пользователя",
phone VARCHAR(11) NOT NULL UNIQUE COMMENT "Телефон пользователя",
created_at DATETIME COMMENT "Дата и время создания строки",
update_at DATETIME COMMENT "Дата и время обновления строки"
) COMMENT "Таблица пользователей";

CREATE TABLE profiles (
user_id INT UNSIGNED NOT NULL PRIMARY KEY COMMENT "Идентификатор строки",
city VARCHAR(100) COMMENT "Город пользователя", 
country VARCHAR(100) COMMENT "Страна пользователя",
family_status ENUM ("в браке", "встречается", "в активном поиске", "свободен") COMMENT "Семейное положение",
`status` ENUM ("Online", "Offline") NOT NULL COMMENT "Текущий статус", 
interests VARCHAR(100) COMMENT "Интересы",
created_at DATETIME COMMENT "Дата и время создания строки",
update_at DATETIME COMMENT "Дата и время обновления строки"
) COMMENT "Таблица профилей";

ALTER TABLE profiles ADD CONSTRAINT profiles_user_id FOREIGN KEY (user_id) REFERENCES users(id);

CREATE TABLE friendship (
request_type_id INT UNSIGNED NOT NULL COMMENT 'Тип запроса',
user_id INT UNSIGNED NOT NULL,
friend_id INT UNSIGNED NOT NULL,
requested_at DATETIME NOT NULL COMMENT 'Время отправки приглашения',
confirmed_at DATETIME COMMENT 'Время подтверждения приглашения',
created_at DATETIME COMMENT 'Дата и время создания строки',    
updated_at DATETIME COMMENT 'Дата и время обновленния строки',
PRIMARY KEY (user_id, friend_id) COMMENT 'Составной первичный ключ'
) COMMENT "Таблица друзей";

ALTER TABLE friendship ADD CONSTRAINT friendship_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE friendship ADD CONSTRAINT friendship_friend_id FOREIGN KEY (friend_id) REFERENCES users(id);

CREATE TABLE friendship_request_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  name VARCHAR(150) NOT NULL UNIQUE COMMENT "Название статуса",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
) COMMENT "Типы запроса на дружбы";

ALTER TABLE friendship ADD CONSTRAINT friendship_request_type_id FOREIGN KEY (request_type_id) REFERENCES friendship_request_types(id); 

CREATE TABLE communities (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор сроки",
  name VARCHAR(150) NOT NULL UNIQUE COMMENT "Название группы",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Группы";

CREATE TABLE communities_users (
  community_id INT UNSIGNED NOT NULL COMMENT "Ссылка на группу",
  user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя",
  PRIMARY KEY (community_id, user_id) COMMENT "Составной первичный ключ",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки", 
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Участники групп, связь между пользователями и группами";

ALTER TABLE communities_users ADD CONSTRAINT communities_users_community_id FOREIGN KEY (community_id) REFERENCES communities(id); 
ALTER TABLE communities_users ADD CONSTRAINT communities_users_user_id FOREIGN KEY (user_id) REFERENCES users(id); 

CREATE TABLE messages (
  messages_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  from_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на отправителя сообщения",
  to_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на получателя сообщения",
  body TEXT NOT NULL COMMENT "Текст сообщения",
  is_important BOOLEAN COMMENT "Признак важности",
  is_delivered BOOLEAN COMMENT "Признак доставки",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
) COMMENT "Сообщения";

ALTER TABLE messages ADD CONSTRAINT messages_from_user_id FOREIGN KEY (from_user_id) REFERENCES users(id); 
ALTER TABLE messages ADD CONSTRAINT messages_to_user_id FOREIGN KEY (to_user_id) REFERENCES users(id); 

CREATE TABLE media (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
	filename VARCHAR(255) NOT NULL COMMENT "Полный путь к файлу",
    media_type_id INT UNSIGNED NOT NULL COMMENT "Ссылка на тип файла",
    metadata JSON NOT NULL COMMENT "Метаданные файла",
    user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя",
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
) COMMENT "Медиафайлы";

CREATE TABLE media_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  name VARCHAR(255) NOT NULL UNIQUE COMMENT "Название типа",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Типы медиафайлов";

ALTER TABLE media ADD CONSTRAINT media_media_type_id FOREIGN KEY (media_type_id) REFERENCES media_types(id); 
ALTER TABLE media ADD CONSTRAINT media_user_id FOREIGN KEY (user_id) REFERENCES users(id); 

CREATE TABLE posts (
id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
user_id INT UNSIGNED,
community_id INT UNSIGNED,
head VARCHAR(200),
body TEXT NOT NULL COMMENT "Текст поста",
is_public BOOLEAN DEFAULT TRUE, 
created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE current_timestamp COMMENT "Время обновления строки"
);

ALTER TABLE posts ADD CONSTRAINT posts_user_id FOREIGN KEY (user_id) REFERENCES users(id); 
ALTER TABLE posts ADD CONSTRAINT posts_community_id FOREIGN KEY (community_id) REFERENCES communities(id); 

CREATE TABLE target_types (
id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
name VARCHAR(255) NOT NULL UNIQUE,
created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки"
);

CREATE TABLE likes (
id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя",
target_id INT UNSIGNED NOT NULL COMMENT "Ссылка на объект",
target_type_id INT UNSIGNED NOT NULL COMMENT "Ссылка на тип объекта",
created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE current_timestamp COMMENT "Время обновления строки"
) COMMENT "Таблица лайков";

ALTER TABLE likes ADD CONSTRAINT likes_user_id FOREIGN KEY (user_id) REFERENCES users(id); 
ALTER TABLE likes ADD CONSTRAINT likes_target_type_id FOREIGN KEY (target_type_id) REFERENCES target_types(id); 

CREATE TABLE post_media (
post_id INT UNSIGNED NOT NULL COMMENT "Ссылка на группу",
media_id INT UNSIGNED NOT NULL COMMENT "Ссылка на медиа",
PRIMARY KEY (post_id, media_id) COMMENT "Составной первичный ключ",
created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки", 
updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
);

ALTER TABLE post_media ADD CONSTRAINT post_media_post_id FOREIGN KEY (post_id) REFERENCES posts(id); 
ALTER TABLE post_media ADD CONSTRAINT post_media_media_id FOREIGN KEY (media_id) REFERENCES media(id); 
